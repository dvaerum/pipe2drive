extern crate clap;
use clap::{App, AppSettings, Arg, ArgMatches, SubCommand};

pub fn get_parsed_arguments<'a>() -> ArgMatches<'a> {
    let args = App::new("Pipe2Drive")
    .version(env!("CARGO_PKG_VERSION"))
    .about("If you pipe data (doesn't matter what data) to this program and then select a name for that data and declare it size, it will be uploaded to Google Drive")
    .setting(AppSettings::SubcommandRequiredElseHelp)
    .arg(Arg::with_name("client_secret_file")
        .long("secret")
        .value_name("FILE")
        .help("Select the file containing the client secret. If you don't have one go here\nhttps://console.developers.google.com/apis/credentials")
        .takes_value(true))
    .arg(Arg::with_name("client_token_file")
        .long("token")
        .value_name("FILE")
        .help("Select the file/there the file containing the client token is/should be saved")
        .takes_value(true))
    .arg(Arg::with_name("debug")
        .long("debug")
        .help("Will display Debug and Info logs"))
    .arg(Arg::with_name("info.rs")
        .long("info.rs")
        .help("Will display Info logs"))
    .arg(Arg::with_name("quiet")
        .long("quiet")
        .help("Will only display Error logs"))
    // UPLOAD
    .subcommand(SubCommand::with_name("upload")
        .about("Upload a file to Google Drive")
        .arg(Arg::with_name("data_size")
            .value_name("size")
            .help("The size of the data you want to upload.\nExample: 100mib, 1gb or 1048576 aka. 1mib)\nSupported Sizes: b, kb, kib, mb, mib, gb, gib, tb and tib")
            .required(true)
            .index(1))
        .arg(Arg::with_name("file_name")
            .short("n")
            .long("name")
            .value_name("FILE NAME")
            .help("The name of the file uploaded to Google Drive")
            .takes_value(true))
        .arg(Arg::with_name("parent_folder_id")
            .long("folder")
            .value_name("ID")
            .help("The ID of the folder where you want the file to be uploaded to.\nIf this is not defined, the file will be uploaded to 'My Drive'")
            .takes_value(true))
        .arg(Arg::with_name("replace")
            .long("replace")
            .conflicts_with("duplicate")
            .help("If a file exists with the same name it will be replaced"))
        .arg(Arg::with_name("duplicate")
            .long("duplicate")
            .conflicts_with("replace")
            .help("Allow multiple files to have the same name"))
        .arg(Arg::with_name("encrypt")
            .long("encrypt")
            .help("Encrypt the context before uploading it to Google Drive"))
        .arg(Arg::with_name("testing")
            .long("testing")
            .help("Uploading a 100MiB file consisting of the repeated text sequence '0123456789'"))
        .arg(Arg::with_name("testing_size")
            .long("testing-size")
            .value_name("size")
            .default_value("100MiB")
            .help("Uploading a 100MiB file consisting of the repeated text sequence '0123456789'"))
        )
    // LIST
    .subcommand(SubCommand::with_name("list")
        .about("List files and there ID")
        .arg(Arg::with_name("folder_id")
            .long("folder")
            .value_name("ID")
            .help("If a folder ID is provided the content of that folder will be listed,\notherwise the content of 'My Drive' will be listed")
            .takes_value(true))
        )
    // INFO
    .subcommand(SubCommand::with_name("info.rs")
        .about("Get info.rs about ID")
        .arg(Arg::with_name("id")
            .value_name("ID")
            .required(true)
            .help("Provided the ID of the content of that you want more info.rs about")
            .takes_value(true))
        )
    // DOWNLOAD
    .subcommand(SubCommand::with_name("download")
        .about("Download a file from Google Drive")
        .arg(Arg::with_name("file_id")
            .long("file")
            .value_name("ID")
            .required(true)
            .help("Provided the ID of the file (or one of the split files) you want to download")
            .takes_value(true))
        )
    .get_matches();

    return args;
}
